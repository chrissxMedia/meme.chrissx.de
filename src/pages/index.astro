---
import { BaseLayout, Footer } from "cmdesigns";
import Settings from "../components/Settings.astro";
---

<BaseLayout lang="en" title="chrissx Meme Generator">
    <noscript>Editing images client-side requires JavaScript.</noscript>
    <Settings />
    <canvas id="canvas"></canvas>
    <img id="out" />
    <Footer start={2020} />
</BaseLayout>

<script>
    function tryParse(s: string): number | undefined {
        if ((+s).toString() === s) return +s;
    }

    const canvas = document.getElementById("canvas") as HTMLCanvasElement;
    const imgout = document.getElementById("out") as HTMLImageElement;
    const rawimg = document.getElementById("rawimage") as HTMLInputElement;
    const upper = document.querySelector("#upper .text") as HTMLInputElement;
    const lower = document.querySelector("#lower .text") as HTMLInputElement;
    const upsz = document.querySelector("#upper .size") as HTMLInputElement;
    const losz = document.querySelector("#lower .size") as HTMLInputElement;
    const src = new Image();

    function render() {
        if (!src.width || !src.height) return;
        canvas.setAttribute("width", src.width.toString());
        canvas.setAttribute("height", src.height.toString());
        const ctx = canvas.getContext("2d")!;
        ctx.textAlign = "center";
        ctx.strokeStyle = "white";
        ctx.drawImage(src, 0, 0);

        function drawText(s: string, fontSize: number, y: number) {
            ctx.font = fontSize + "px Impact";
            ctx.lineWidth = fontSize / 6;
            ctx.strokeText(s, src.width / 2, y);
            ctx.fillText(s, src.width / 2, y);
        }

        if (upper.value) {
            const autosz = Math.round((src.width / upper.value.length) * 1.25);
            upsz.placeholder = autosz.toString();
            const ufs = tryParse(upsz.value) ?? autosz;
            drawText(upper.value.toUpperCase(), ufs, ufs);
        } else {
            upsz.placeholder = "size";
        }

        if (lower.value) {
            const autosz = Math.round((src.width / lower.value.length) * 1.25);
            losz.placeholder = autosz.toString();
            const lfs = tryParse(losz.value) ?? autosz;
            drawText(lower.value.toUpperCase(), lfs, src.height - lfs / 3);
        } else {
            losz.placeholder = "size";
        }

        imgout.src = canvas.toDataURL();
    }

    const reader = new FileReader();
    reader.onload = async function () {
        src.src = reader.result;
        await src.decode();
        render();
    };

    const make = () =>
        rawimg.files?.length && reader.readAsDataURL(rawimg.files[0]);
    document.getElementById("make")!.addEventListener("click", make);
    rawimg.addEventListener("change", make);

    [upper, lower, upsz, losz].forEach((x) => {
        x.addEventListener("input", render);
    });
</script>

<style>
    :global(body) {
        font-family: var(--impact);
        width: min(90%, 500px);
        margin: 0 auto;
    }
    :global(input) {
        font-size: min(24px, 5vw);
        border-radius: 0.5em;
    }
    img {
        width: 100%;
    }
    canvas {
        display: none;
    }
</style>
